{"ast":null,"code":"'use strict';\n\nvar $ = require('../internals/export');\n\nvar hide = require('../internals/hide');\n\nvar requireObjectCoercible = require('../internals/require-object-coercible');\n\nvar anObject = require('../internals/an-object');\n\nvar isRegExp = require('../internals/is-regexp');\n\nvar getRegExpFlags = require('../internals/regexp-flags');\n\nvar speciesConstructor = require('../internals/species-constructor');\n\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar IS_PURE = require('../internals/is-pure');\n\nvar REPLACE_ALL = wellKnownSymbol('replaceAll');\nvar RegExpPrototype = RegExp.prototype;\n\nvar $replaceAll = function $replaceAll(string, replaceValue) {\n  var rx = anObject(this);\n  var flags = String('flags' in RegExpPrototype ? rx.flags : getRegExpFlags.call(rx));\n\n  if (!~flags.indexOf('g')) {\n    rx = new (speciesConstructor(rx, RegExp))(rx.source, flags + 'g');\n  }\n\n  return String(string).replace(rx, replaceValue);\n}; // `String.prototype.replaceAll` method\n// https://github.com/tc39/proposal-string-replace-all\n\n\n$({\n  target: 'String',\n  proto: true\n}, {\n  replaceAll: function replaceAll(searchValue, replaceValue) {\n    var O = requireObjectCoercible(this);\n    var replacer, string, searchString, template, result, index;\n\n    if (searchValue != null) {\n      replacer = searchValue[REPLACE_ALL];\n\n      if (replacer !== undefined) {\n        return replacer.call(searchValue, O, replaceValue);\n      } else if (IS_PURE && isRegExp(searchValue)) {\n        return $replaceAll.call(searchValue, O, replaceValue);\n      }\n    }\n\n    string = String(O);\n    searchString = String(searchValue);\n    template = string.split(searchString);\n\n    if (typeof replaceValue !== 'function') {\n      return template.join(String(replaceValue));\n    }\n\n    result = template[0];\n\n    for (index = 1; index < template.length; index++) {\n      result += String(replaceValue(searchString, index - 1, string));\n      result += template[index];\n    }\n\n    return result;\n  }\n});\nIS_PURE || REPLACE_ALL in RegExpPrototype || hide(RegExpPrototype, REPLACE_ALL, $replaceAll);","map":null,"metadata":{},"sourceType":"script"}