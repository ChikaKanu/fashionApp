{"ast":null,"code":"'use strict'; // https://github.com/tc39/proposal-observable\n\nvar $ = require('../internals/export');\n\nvar DESCRIPTORS = require('../internals/descriptors');\n\nvar setSpecies = require('../internals/set-species');\n\nvar aFunction = require('../internals/a-function');\n\nvar anObject = require('../internals/an-object');\n\nvar isObject = require('../internals/is-object');\n\nvar anInstance = require('../internals/an-instance');\n\nvar defineProperty = require('../internals/object-define-property').f;\n\nvar hide = require('../internals/hide');\n\nvar redefineAll = require('../internals/redefine-all');\n\nvar getIterator = require('../internals/get-iterator');\n\nvar iterate = require('../internals/iterate');\n\nvar hostReportErrors = require('../internals/host-report-errors');\n\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar InternalStateModule = require('../internals/internal-state');\n\nvar OBSERVABLE = wellKnownSymbol('observable');\nvar getInternalState = InternalStateModule.get;\nvar setInternalState = InternalStateModule.set;\n\nvar getMethod = function getMethod(fn) {\n  return fn == null ? undefined : aFunction(fn);\n};\n\nvar cleanupSubscription = function cleanupSubscription(subscriptionState) {\n  var cleanup = subscriptionState.cleanup;\n\n  if (cleanup) {\n    subscriptionState.cleanup = undefined;\n\n    try {\n      cleanup();\n    } catch (error) {\n      hostReportErrors(error);\n    }\n  }\n};\n\nvar subscriptionClosed = function subscriptionClosed(subscriptionState) {\n  return subscriptionState.observer === undefined;\n};\n\nvar close = function close(subscription, subscriptionState) {\n  if (!DESCRIPTORS) {\n    subscription.closed = true;\n    var subscriptionObserver = subscriptionState.subscriptionObserver;\n    if (subscriptionObserver) subscriptionObserver.closed = true;\n  }\n\n  subscriptionState.observer = undefined;\n};\n\nvar Subscription = function Subscription(observer, subscriber) {\n  var subscriptionState = setInternalState(this, {\n    cleanup: undefined,\n    observer: anObject(observer),\n    subscriptionObserver: undefined\n  });\n  var start;\n  if (!DESCRIPTORS) this.closed = false;\n\n  try {\n    if (start = getMethod(observer.start)) start.call(observer, this);\n  } catch (error) {\n    hostReportErrors(error);\n  }\n\n  if (subscriptionClosed(subscriptionState)) return;\n  var subscriptionObserver = subscriptionState.subscriptionObserver = new SubscriptionObserver(this);\n\n  try {\n    var cleanup = subscriber(subscriptionObserver);\n    var subscription = cleanup;\n    if (cleanup != null) subscriptionState.cleanup = typeof cleanup.unsubscribe === 'function' ? function () {\n      subscription.unsubscribe();\n    } : aFunction(cleanup);\n  } catch (error) {\n    subscriptionObserver.error(error);\n    return;\n  }\n\n  if (subscriptionClosed(subscriptionState)) cleanupSubscription(subscriptionState);\n};\n\nSubscription.prototype = redefineAll({}, {\n  unsubscribe: function unsubscribe() {\n    var subscriptionState = getInternalState(this);\n\n    if (!subscriptionClosed(subscriptionState)) {\n      close(this, subscriptionState);\n      cleanupSubscription(subscriptionState);\n    }\n  }\n});\nif (DESCRIPTORS) defineProperty(Subscription.prototype, 'closed', {\n  configurable: true,\n  get: function get() {\n    return subscriptionClosed(getInternalState(this));\n  }\n});\n\nvar SubscriptionObserver = function SubscriptionObserver(subscription) {\n  setInternalState(this, {\n    subscription: subscription\n  });\n  if (!DESCRIPTORS) this.closed = false;\n};\n\nSubscriptionObserver.prototype = redefineAll({}, {\n  next: function next(value) {\n    var subscriptionState = getInternalState(getInternalState(this).subscription);\n\n    if (!subscriptionClosed(subscriptionState)) {\n      var observer = subscriptionState.observer;\n\n      try {\n        var nextMethod = getMethod(observer.next);\n        if (nextMethod) nextMethod.call(observer, value);\n      } catch (error) {\n        hostReportErrors(error);\n      }\n    }\n  },\n  error: function error(value) {\n    var subscription = getInternalState(this).subscription;\n    var subscriptionState = getInternalState(subscription);\n\n    if (!subscriptionClosed(subscriptionState)) {\n      var observer = subscriptionState.observer;\n      close(subscription, subscriptionState);\n\n      try {\n        var errorMethod = getMethod(observer.error);\n        if (errorMethod) errorMethod.call(observer, value);else hostReportErrors(value);\n      } catch (err) {\n        hostReportErrors(err);\n      }\n\n      cleanupSubscription(subscriptionState);\n    }\n  },\n  complete: function complete() {\n    var subscription = getInternalState(this).subscription;\n    var subscriptionState = getInternalState(subscription);\n\n    if (!subscriptionClosed(subscriptionState)) {\n      var observer = subscriptionState.observer;\n      close(subscription, subscriptionState);\n\n      try {\n        var completeMethod = getMethod(observer.complete);\n        if (completeMethod) completeMethod.call(observer);\n      } catch (error) {\n        hostReportErrors(error);\n      }\n\n      cleanupSubscription(subscriptionState);\n    }\n  }\n});\nif (DESCRIPTORS) defineProperty(SubscriptionObserver.prototype, 'closed', {\n  configurable: true,\n  get: function get() {\n    return subscriptionClosed(getInternalState(getInternalState(this).subscription));\n  }\n});\n\nvar $Observable = function Observable(subscriber) {\n  anInstance(this, $Observable, 'Observable');\n  setInternalState(this, {\n    subscriber: aFunction(subscriber)\n  });\n};\n\nredefineAll($Observable.prototype, {\n  subscribe: function subscribe(observer) {\n    var length = arguments.length;\n    return new Subscription(typeof observer === 'function' ? {\n      next: observer,\n      error: length > 1 ? arguments[1] : undefined,\n      complete: length > 2 ? arguments[2] : undefined\n    } : isObject(observer) ? observer : {}, getInternalState(this).subscriber);\n  }\n});\nredefineAll($Observable, {\n  from: function from(x) {\n    var C = typeof this === 'function' ? this : $Observable;\n    var observableMethod = getMethod(anObject(x)[OBSERVABLE]);\n\n    if (observableMethod) {\n      var observable = anObject(observableMethod.call(x));\n      return observable.constructor === C ? observable : new C(function (observer) {\n        return observable.subscribe(observer);\n      });\n    }\n\n    var iterator = getIterator(x);\n    return new C(function (observer) {\n      iterate(iterator, function (it) {\n        observer.next(it);\n        if (observer.closed) return iterate.stop();\n      }, undefined, false, true);\n      observer.complete();\n    });\n  },\n  of: function of() {\n    var C = typeof this === 'function' ? this : $Observable;\n    var length = arguments.length;\n    var items = new Array(length);\n    var index = 0;\n\n    while (index < length) {\n      items[index] = arguments[index++];\n    }\n\n    return new C(function (observer) {\n      for (var i = 0; i < length; i++) {\n        observer.next(items[i]);\n        if (observer.closed) return;\n      }\n\n      observer.complete();\n    });\n  }\n});\nhide($Observable.prototype, OBSERVABLE, function () {\n  return this;\n});\n$({\n  global: true\n}, {\n  Observable: $Observable\n});\nsetSpecies('Observable');","map":null,"metadata":{},"sourceType":"script"}