{"ast":null,"code":"var $ = require('../internals/export'); // TODO: in core-js@4, move /modules/ dependencies to public entries for better optimization by tools like `preset-env`\n\n\nvar Set = require('../modules/es.set');\n\nvar ReflectMetadataModule = require('../internals/reflect-metadata');\n\nvar anObject = require('../internals/an-object');\n\nvar getPrototypeOf = require('../internals/object-get-prototype-of');\n\nvar iterate = require('../internals/iterate');\n\nvar ordinaryOwnMetadataKeys = ReflectMetadataModule.keys;\nvar toMetadataKey = ReflectMetadataModule.toKey;\n\nvar from = function from(iter) {\n  var result = [];\n  iterate(iter, result.push, result);\n  return result;\n};\n\nvar ordinaryMetadataKeys = function ordinaryMetadataKeys(O, P) {\n  var oKeys = ordinaryOwnMetadataKeys(O, P);\n  var parent = getPrototypeOf(O);\n  if (parent === null) return oKeys;\n  var pKeys = ordinaryMetadataKeys(parent, P);\n  return pKeys.length ? oKeys.length ? from(new Set(oKeys.concat(pKeys))) : pKeys : oKeys;\n}; // `Reflect.getMetadataKeys` method\n// https://github.com/rbuckton/reflect-metadata\n\n\n$({\n  target: 'Reflect',\n  stat: true\n}, {\n  getMetadataKeys: function getMetadataKeys(target\n  /* , targetKey */\n  ) {\n    var targetKey = arguments.length < 2 ? undefined : toMetadataKey(arguments[1]);\n    return ordinaryMetadataKeys(anObject(target), targetKey);\n  }\n});","map":null,"metadata":{},"sourceType":"script"}